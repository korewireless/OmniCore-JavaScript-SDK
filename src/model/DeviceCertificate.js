/**
 * OmniCore Model and State Management API
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@korewireless.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceCredential from './DeviceCredential';

/**
 * The DeviceCertificate model module.
 * @module model/DeviceCertificate
 * @version 1.0
 */
class DeviceCertificate {
    /**
     * Constructs a new <code>DeviceCertificate</code>.
     * @alias module:model/DeviceCertificate
     * @param credentials {module:model/DeviceCredential} 
     */
    constructor(credentials) { 
        
        DeviceCertificate.initialize(this, credentials);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, credentials) { 
        obj['credentials'] = credentials;
    }

    /**
     * Constructs a <code>DeviceCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceCertificate} obj Optional instance to populate.
     * @return {module:model/DeviceCertificate} The populated <code>DeviceCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceCertificate();

            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = DeviceCredential.constructFromObject(data['credentials']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceCertificate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceCertificate.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `credentials`
        if (data['credentials']) { // data not null
          DeviceCredential.validateJSON(data['credentials']);
        }

        return true;
    }


}

DeviceCertificate.RequiredProperties = ["credentials"];

/**
 * @member {module:model/DeviceCredential} credentials
 */
DeviceCertificate.prototype['credentials'] = undefined;






export default DeviceCertificate;

