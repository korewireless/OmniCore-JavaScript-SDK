/**
 * OmniCore Model and State Management API
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@korewireless.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MqttConfig model module.
 * @module model/MqttConfig
 * @version 1.0
 */
class MqttConfig {
    /**
     * Constructs a new <code>MqttConfig</code>.
     * @alias module:model/MqttConfig
     */
    constructor() { 
        
        MqttConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MqttConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MqttConfig} obj Optional instance to populate.
     * @return {module:model/MqttConfig} The populated <code>MqttConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MqttConfig();

            if (data.hasOwnProperty('mqttEnabledState')) {
                obj['mqttEnabledState'] = ApiClient.convertToType(data['mqttEnabledState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MqttConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MqttConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mqttEnabledState'] && !(typeof data['mqttEnabledState'] === 'string' || data['mqttEnabledState'] instanceof String)) {
            throw new Error("Expected the field `mqttEnabledState` to be a primitive type in the JSON string but got " + data['mqttEnabledState']);
        }

        return true;
    }


}



/**
 * MqttEnabledState: If enabled, allows connections using the MQTT protocol. Otherwise, MQTT connections to this registry will fail.  Possible values:   \"MQTT_STATE_UNSPECIFIED\" - No MQTT state specified. If not specified, MQTT will be enabled by default.   \"MQTT_ENABLED\" - Enables a MQTT connection.   \"MQTT_DISABLED\" - Disables a MQTT connection.
 * @member {module:model/MqttConfig.MqttEnabledStateEnum} mqttEnabledState
 */
MqttConfig.prototype['mqttEnabledState'] = undefined;





/**
 * Allowed values for the <code>mqttEnabledState</code> property.
 * @enum {String}
 * @readonly
 */
MqttConfig['MqttEnabledStateEnum'] = {

    /**
     * value: "MQTT_ENABLED"
     * @const
     */
    "ENABLED": "MQTT_ENABLED",

    /**
     * value: "MQTT_DISABLED"
     * @const
     */
    "DISABLED": "MQTT_DISABLED",

    /**
     * value: "MQTT_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "MQTT_STATE_UNSPECIFIED"
};



export default MqttConfig;

