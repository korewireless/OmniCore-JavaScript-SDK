/**
 * OmniCore Model and State Management API
 * This is an OmniCore Model and State Management server.
 *
 * The version of the OpenAPI document: 1.8.3
 * Contact: omnicoresupport@korewireless.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EnableVault model module.
 * @module model/EnableVault
 * @version 1.8.3
 */
class EnableVault {
    /**
     * Constructs a new <code>EnableVault</code>.
     * @alias module:model/EnableVault
     * @param type {module:model/EnableVault.TypeEnum} 
     * @param action {module:model/EnableVault.ActionEnum} 
     */
    constructor(type, action) { 
        
        EnableVault.initialize(this, type, action);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, action) { 
        obj['type'] = type;
        obj['action'] = action;
    }

    /**
     * Constructs a <code>EnableVault</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnableVault} obj Optional instance to populate.
     * @return {module:model/EnableVault} The populated <code>EnableVault</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnableVault();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnableVault</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnableVault</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EnableVault.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }

        return true;
    }


}

EnableVault.RequiredProperties = ["type", "action"];

/**
 * @member {module:model/EnableVault.TypeEnum} type
 */
EnableVault.prototype['type'] = undefined;

/**
 * @member {module:model/EnableVault.ActionEnum} action
 */
EnableVault.prototype['action'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
EnableVault['TypeEnum'] = {

    /**
     * value: "GCS"
     * @const
     */
    "GCS": "GCS"
};


/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
EnableVault['ActionEnum'] = {

    /**
     * value: "enable"
     * @const
     */
    "enable": "enable",

    /**
     * value: "disable"
     * @const
     */
    "disable": "disable"
};



export default EnableVault;

